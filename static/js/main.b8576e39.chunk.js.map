{"version":3,"sources":["components/superhero.js","components/fight-arena.js","App.js","serviceWorker.js","index.js"],"names":["Superhero","state","showStats","this","props","details","winner","powerstats","combat","durability","intelligence","power","speed","strength","styles","id","className","style","display","flexDirection","backgroundImage","images","md","flex","name","biography","publisher","Component","FightArena","fetchFighter","index","a","fetch","resp","status","newId","Math","ceil","random","json","data","setState","fighter1","fighter2","Error","calcScore","stats","isLoading","fight","bind","id1","id2","fetchFighters","prevProps","prevState","stats1","stats2","onClick","App","randomId","getNewFighters","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8576e39.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Superhero extends Component {\n  state = {};\n  render() {\n    let showStats = false;\n    const { details, winner } = this.props;\n    const {\n      combat,\n      durability,\n      intelligence,\n      power,\n      speed,\n      strength,\n    } = details.powerstats;\n    let styles = 'fighter-details h-100';\n    if (winner !== 0) {\n      styles += winner === details.id ? ' winner' : ' loser';\n      showStats = true;\n    }\n    return (\n      <div className=\"h-100\">\n        {details && (\n          <div\n            className=\"h-100\"\n            style={{ display: 'flex', flexDirection: 'column' }}\n          >\n            <div\n              className={styles}\n              style={{ backgroundImage: `url(${details.images.md})`, flex: 1 }}\n            ></div>\n            <div className=\"flex v-center h-space-between\">\n              <h4>\n                {details.name} ({details.biography.publisher})\n              </h4>\n              {showStats && (\n                <>\n                  <p>\n                    COM: {combat}, DUR: {durability}, INT: {intelligence}, POW:{' '}\n                    {power}, SPD: {speed}, STR: {strength}\n                  </p>\n                  <h2>\n                    {combat +\n                      durability +\n                      intelligence +\n                      power +\n                      speed +\n                      strength}\n                  </h2>\n                </>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Superhero;\n","import React, { Component } from 'react';\nimport Superhero from './superhero';\n\nclass FightArena extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fighter1: null,\n      fighter2: null,\n      winner: 0,\n      isLoading: false,\n    };\n    this.fight = this.fight.bind(this);\n  }\n\n  fetchFighters() {\n    try {\n      this.fetchFighter(this.props.id1, 1);\n      this.fetchFighter(this.props.id2, 2);\n    } finally {\n      this.setState({ isLoading: false });\n    }\n  }\n\n  componentDidMount() {\n    this.fetchFighters();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.id1 !== this.props.id1 || prevProps.id2 !== this.props.id2) {\n      this.setState({ isLoading: true, winner: 0 });\n      this.fetchFighters();\n    }\n  }\n\n  fetchFighter = async (id, index) => {\n    try {\n      const resp = await fetch(\n        `https://cdn.rawgit.com/akabab/superhero-api/0.2.0/api/id/${id}.json`,\n      );\n      if (resp.status === 404) {\n        const newId = Math.ceil(Math.random() * 731);\n        this.fetchFighter(newId, index);\n      } else {\n        const data = await resp.json();\n        if (index === 1) {\n          this.setState({\n            fighter1: data,\n          });\n        } else {\n          this.setState({\n            fighter2: data,\n          });\n        }\n      }\n    } catch (error) {\n      throw new Error('error in fetching fighters');\n    }\n  };\n\n  fight() {\n    const stats1 = this.state.fighter1.powerstats;\n    const stats2 = this.state.fighter2.powerstats;\n\n    const score1 = this.calcScore(stats1);\n    const score2 = this.calcScore(stats2);\n\n    const winner =\n      score1 > score2 ? this.state.fighter1.id : this.state.fighter2.id;\n\n    this.setState({ winner });\n  }\n\n  calcScore = stats => {\n    const { combat, durability, intelligence, power, speed, strength } = stats;\n    return combat + durability + intelligence + power + speed + strength;\n  };\n\n  render() {\n    return (\n      <div className=\"fight-arena h-100\">\n        {this.state.fighter1 && this.state.fighter2 && !this.state.isLoading && (\n          <>\n            <div className=\"fighter h-100\">\n              <Superhero\n                details={this.state.fighter1}\n                winner={this.state.winner}\n              />\n            </div>\n            <button className=\"fight-btn btn\" onClick={this.fight}>\n              FIGHT\n            </button>\n            <div className=\"fighter h-100\">\n              <Superhero\n                details={this.state.fighter2}\n                winner={this.state.winner}\n              />\n            </div>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default FightArena;\n","import React, { Component } from 'react';\nimport FightArena from './components/fight-arena';\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id1: 414,\n      id2: 332,\n    };\n  }\n\n  randomId = () => {\n    return Math.ceil(Math.random() * 731);\n  };\n\n  getNewFighters = () => {\n    this.setState({\n      id1: this.randomId(),\n      id2: this.randomId(),\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App h-100\">\n        <div className=\"header\">\n          <span>Super Combat</span>\n          <button className=\"btn new-fight\" onClick={this.getNewFighters}>New Fight</button>\n        </div>\n        <FightArena id1={this.state.id1} id2={this.state.id2} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}